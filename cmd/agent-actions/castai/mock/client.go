// Code generated by MockGen. DO NOT EDIT.
// Source: castai.go

// Package mock_castai is a generated GoMock package.
package mock_castai

import (
	castai "castai-agent/cmd/agent-actions/castai"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendLogEvent mocks base method.
func (m *MockClient) SendLogEvent(ctx context.Context, clusterID string, req *castai.IngestAgentLogsRequest) *castai.IngestAgentLogsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogEvent", ctx, clusterID, req)
	ret0, _ := ret[0].(*castai.IngestAgentLogsResponse)
	return ret0
}

// SendLogEvent indicates an expected call of SendLogEvent.
func (mr *MockClientMockRecorder) SendLogEvent(ctx, clusterID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogEvent", reflect.TypeOf((*MockClient)(nil).SendLogEvent), ctx, clusterID, req)
}
